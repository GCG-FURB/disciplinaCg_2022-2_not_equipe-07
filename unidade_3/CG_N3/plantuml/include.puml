@startuml
class Mundo {
    + {static} GetInstance(width:int, height:int) : Mundo
    mouseX : int
    mouseY : int
}
class Program {
    {static} Main(args:string[]) : void
}
GameWindow <|-- Mundo
abstract class Objeto {
    + PrimitivaTamanho : float <<get>> <<set>>
    + Objeto(rotulo:string, paiRef:Objeto)
    + Desenhar() : void
    + FilhoAdicionar(filho:Objeto) : void
    + FilhoRemover(filho:Objeto) : void
    + VerificaEstaDentroBBox(pto:Ponto4D) : bool
}
Objeto --> "ObjetoCor" Cor
Objeto --> "PrimitivaTipo" PrimitiveType
Objeto --> "BBox" BBox
abstract class ObjetoGeometria {
    + ObjetoGeometria(rotulo:string, paiRef:Objeto)
    + PontosAdicionar(pto:Ponto4D) : void
    + PontosRemoverAt(posicao:int) : void
    + PontosRemoverUltimo() : void
    + PontosUltimo() : Ponto4D
    + PontosAlterar(pto:Ponto4D, posicao:int) : void
    + VerticeMaisProximo(pontoMouse:Ponto4D, isRemove:bool) : void
    + ScanlineIntesec(y:double, y1:double, y2:double) : double
    + ScanLine(pontoMouse:Ponto4D) : bool
    + ScanlineCalcularXi(x1:double, x2:double, t:double) : double
    + ScanLine(pontoMouse:Ponto4D, listaPontos:List<Ponto4D>) : bool
    + <<override>> ToString() : string
}
Objeto <|-- ObjetoGeometria
class Retangulo {
    + Retangulo(rotulo:string, paiRef:Objeto, ptoInfEsq:Ponto4D, ptoSupDir:Ponto4D)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Retangulo
class Poligono {
    + Poligono(rotulo:string, pai:Objeto)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Poligono
abstract class Utilitario {
    + {static} AjudaTeclado() : void
    + {static} charProximo(atual:char) : char
}
abstract class Privado_BBox {
    + {static} Dentro(bBox:BBox, pto:Ponto4D) : bool
}
class Privado_Circulo {
    + Privado_Circulo(rotulo:string, paiRef:Objeto, ptoCentro:Ponto4D, raio:double)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Privado_Circulo
abstract class Matematica {
    + {static} GerarPtosCirculo(angulo:double, raio:double) : Ponto4D
    + {static} GerarPtosCirculoSimÃ©trico(raio:double) : double
    + {static} DistanciaEuclidiana(pontoLista:Ponto4D, pontoMouse:Ponto4D) : double
}
class Privado_SegReta {
    + Privado_SegReta(rotulo:string, paiRef:Objeto, ptoIni:Ponto4D, ptoFim:Ponto4D)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Privado_SegReta
@enduml
