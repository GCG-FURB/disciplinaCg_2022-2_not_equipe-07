@startuml
class Mundo {
    + {static} GetInstance(width:int, height:int) : Mundo
    mouseX : int
    mouseY : int
}
class Program {
    {static} Main(args:string[]) : void
}
GameWindow <|-- Mundo
class BBox {
    + BBox(menorX:double, menorY:double, menorZ:double, maiorX:double, maiorY:double, maiorZ:double)
    + Atribuir(pto:Ponto4D) : void
    + Atualizar(pto:Ponto4D) : void
    + Atualizar(x:double, y:double, z:double) : void
    + ProcessarCentro() : void
    + Desenhar() : void
    + obterMenorX : double <<get>>
    + obterMenorY : double <<get>>
    + obterMenorZ : double <<get>>
    + obterMaiorX : double <<get>>
    + obterMaiorY : double <<get>>
    + obterMaiorZ : double <<get>>
    + <<override>> ToString() : string
}
BBox --> "obterCentro" Ponto4D
class CameraOrtho {
    + CameraOrtho(xMin:double, xMax:double, yMin:double, yMax:double, zMin:double, zMax:double)
    + xmin : double <<get>> <<set>>
    + xmax : double <<get>> <<set>>
    + ymin : double <<get>> <<set>>
    + ymax : double <<get>> <<set>>
    + zmin : double <<get>> <<set>>
    + zmax : double <<get>> <<set>>
    + PanEsquerda() : void
    + PanDireita() : void
    + PanCima() : void
    + PanBaixo() : void
    + ZoomIn() : void
    + ZoomOut() : void
    + <<override>> ToString() : string
}
class CameraPerspective {
    + CameraPerspective(fovy:float, aspect:float, near:float, far:float)
    + Fovy : float <<get>> <<set>>
    + Aspect : float <<get>> <<set>>
    + Near : float <<get>> <<set>>
    + Far : float <<get>> <<set>>
    + <<override>> ToString() : string
}
CameraPerspective --> "Eye" Vector3
CameraPerspective --> "At" Vector3
CameraPerspective --> "Up" Vector3
class Cor {
    + Cor(corR:byte, corG:byte, corB:byte, corA:byte)
    + <<override>> ToString() : string
    + CorR : byte <<get>> <<set>>
    + CorG : byte <<get>> <<set>>
    + CorB : byte <<get>> <<set>>
    + CorA : byte <<get>> <<set>>
}
abstract class Objeto {
    + PrimitivaTamanho : float <<get>> <<set>>
    + Objeto(rotulo:string, paiRef:Objeto)
    + Desenhar() : void
    + FilhoAdicionar(filho:Objeto) : void
    + FilhoRemover(filho:Objeto) : void
    + VerificaEstaDentroBBox(pto:Ponto4D) : bool
}
Objeto --> "ObjetoCor" Cor
Objeto --> "PrimitivaTipo" PrimitiveType
Objeto --> "BBox" BBox
abstract class ObjetoGeometria {
    + ObjetoGeometria(rotulo:string, paiRef:Objeto)
    + PontosAdicionar(pto:Ponto4D) : void
    + PontosRemoverAt(posicao:int) : void
    + PontosRemoverUltimo() : void
    + PontosUltimo() : Ponto4D
    + PontosAlterar(pto:Ponto4D, posicao:int) : void
    + VerticeMaisProximo(pontoMouse:Ponto4D, isRemove:bool) : void
    + ScanlineIntesec(y:double, y1:double, y2:double) : double
    + ScanLine(pontoMouse:Ponto4D) : bool
    + ScanlineCalcularXi(x1:double, x2:double, t:double) : double
    + ScanLine(pontoMouse:Ponto4D, listaPontos:List<Ponto4D>) : bool
    + <<override>> ToString() : string
}
Objeto <|-- ObjetoGeometria
class Retangulo {
    + Retangulo(rotulo:string, paiRef:Objeto, ptoInfEsq:Ponto4D, ptoSupDir:Ponto4D)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Retangulo
class Poligono {
    + Poligono(rotulo:string, pai:Objeto)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Poligono
abstract class Utilitario {
    + {static} AjudaTeclado() : void
    + {static} charProximo(atual:char) : char
}
abstract class Privado_BBox {
    + {static} Dentro(bBox:BBox, pto:Ponto4D) : bool
}
class Privado_Circulo {
    + Privado_Circulo(rotulo:string, paiRef:Objeto, ptoCentro:Ponto4D, raio:double)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Privado_Circulo
abstract class Matematica {
    + {static} GerarPtosCirculo(angulo:double, raio:double) : Ponto4D
    + {static} GerarPtosCirculoSimÃ©trico(raio:double) : double
    + {static} DistanciaEuclidiana(pontoLista:Ponto4D, pontoMouse:Ponto4D) : double
}
class Privado_SegReta {
    + Privado_SegReta(rotulo:string, paiRef:Objeto, ptoIni:Ponto4D, ptoFim:Ponto4D)
    + <<override>> ToString() : string
}
ObjetoGeometria <|-- Privado_SegReta
class Ponto4D {
    + Ponto4D(x:double, y:double, z:double, w:double)
    + Ponto4D(pto:Ponto4D)
    + X : double <<get>> <<set>>
    + Y : double <<get>> <<set>>
    + Z : double <<get>> <<set>>
    + W : double <<get>>
    + <<override>> ToString() : string
}
class Transformacao4D {
    {static} + <<readonly>> DEG_TO_RAD : double = 0.017453292519943295769236907684886
    + Transformacao4D()
    + AtribuirIdentidade() : void
    + AtribuirTranslacao(tx:double, ty:double, tz:double) : void
    + AtribuirEscala(sX:double, sY:double, sZ:double) : void
    + AtribuirRotacaoX(radians:double) : void
    + AtribuirRotacaoY(radians:double) : void
    + AtribuirRotacaoZ(radians:double) : void
    + MultiplicarPonto(pto:Ponto4D) : Ponto4D
    + MultiplicarMatriz(t:Transformacao4D) : Transformacao4D
    + ObterElemento(index:int) : double
    + AtribuirElemento(index:int, value:double) : void
    + ObterDados() : double[]
    + AtribuirDados(data:double[]) : void
    + <<override>> ToString() : string
}
@enduml
